
# Use a lightweight OpenJDK image
FROM openjdk:11-jre-slim

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy application files to the container
COPY ./target/app.jar .

# Expose the application port
EXPOSE 8080

# Define the entry point to run the app
ENTRYPOINT ["java", "-jar", "app.jar"]

# Default command (optional)
CMD ["--server.port=8080"]

# Metadata about the image
LABEL maintainer="nawaz@example.com"
LABEL version="1.0"
LABEL description="This is a Node.js application"

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy the application files
COPY . .

# Install dependencies
RUN npm install

# Run the application
CMD ["npm", "start"]

# Add remote configuration or archives
ADD https://example.com/external-config.yaml /usr/src/app/config.yaml
ADD config.tar.gz /usr/src/app/config/

# Build-time variable
ARG APP_VERSION=1.0

# Define a volume for persistent data
VOLUME /usr/src/app/data

# Run the first 'whoami' as root and save the output
RUN whoami > /tmp/1stwhoami.txt

# Add a new user
RUN useradd -m -s /bin/bash newuser
RUN useradd -m -s /bin/bash newuser && echo "newuser:newpassword" | chpasswd

# Switch to the new user
USER newuser

# Run the second 'whoami' as the new user and save the output
RUN whoami > /tmp/2ndwhoami.txt

# Revert back to root if needed for further instructions (optional)
USER root

# Default command (optional)
CMD ["cat", "/tmp/1stwhoami.txt", "/tmp/2ndwhoami.txt"]
